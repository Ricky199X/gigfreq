Concert Tracker:

- App to track concerts a user has gone to/is going to 

- User can find bands playing a show in their city/state, "attend" those shows, and see other users attending the same show

- Bands can use an admin feature to post their upcoming shows, track number of users attending, and see user profiles to connect with their fans 

MODELS:

User - username, email, city, state, password, favorite_band
Band - name, email, password, website, genre, description
Show - show_name, venue, city, state, date
User Band - user_id, band_id
User Show - user_id, show_id, tickets_bought
Band Show - band_id, show_idhgjk

KEY FEATURES:

User:

1. Track concerts they’ve attended
2. Can “follow” bands that they enjoy
3. See other users attending that same show

Band:
1. Add shows to their schedule
2. “Find a Fan” -> shows them profiles of fans at any given show to connect with
3. Can easily track metrics of show attendance + cities they are most popular in

User Flow

Layout: Home <-> Shows <-> My Artists (stretch goal) <-> Profile <-> Log Out

User fills out form to sign up - can either fill out the form or use Google/Facebook to sign up 
Upon successful sign up, will be logged to and redirected to home page (Menu layout: “Home”, “Upcoming Shows”, “Profile”, “Log Out”
	
Home Page: will display a welcome message, condensed summary of user’s concerts attended in the past, section of upcoming shows with most rsvps which user can “quick add” to their schedule
Shows: Will feature a container with the upcoming schedule of shows based on their state, user can click on the link to open up the show details, then “attend” the show (similar to rails amusement park). Stretch goal here: implementing a search function by artist name.
My artists: User can keep an index of their favorite artists here, easily access the artists show page 
Profile: User can complete a form to edit their profile -> changes will be persisted to the database
Log out: destroys the session 

Band Flow

Layout: Home <-> Shows <-> Metrics (stretch goal) <-> Profile <-> Log Out

Band completes the band form with their information - do not want to allow Google/Facebook sign up here 
Home page: display a welcome message, total number of fans on platform, and condensed summary of band's concerts played in the past, section of upcoming shows + total number of RSVP’s to those shows. 
Your Shows: Index page of Upcoming + Previous Shows. If a band clicks on the details of a past or upcoming show - is taken to a summary of the shows details + list of platform users that attending/that attended it -> can click a user’s details to see their basic fan information. Band can post or delete upcoming shows on this page.
Metrics: Data related to fan engagement + stats of total attendance numbers 
Profile: Band can update their profile here
Logout: destroys the session 

QUESTIONS:

1. Will there be a need for an additional join table specifically for venue or could that just be a nested show route? (I think just could be a nested route)

2. Should the band signup feature a different form than the user sign up because a band has slightly different attributes? Or should the there be an “are you an admin?” checkbox on the main signup form?

If user is a user -> show the user buttons, if the user is a band -> show the band buttons

OR

Probably will need an account table -> One will either need to be User or Band


Test User account: user@user.com -> user
Test Band Account: interpol@interpol.com -> interpol

Tasks: 

Validation Errors:

1. Account - Password Presence, Length 








Finished Tasks: 

Softwzare update so that i can install yarn - DONE
Rework Models - DONE
Migrate Models - DONE
User Sign up - DONE
User Sign In - DONE
User log out - DONE
Migrations for all models except for Band - DONE
Make a Accounts table in Migrations - DONE
Give it password_digest, username -- > validate uniqueness of username - DONE
Be polymorphic. Belongs to an "accountable", which will be User or Band - DONE
Sign up will be done through account, and give a radiobutton on signup to indicate if its a band or a user - DONE
Redirect to new user or new band page - DONE
Take out username and password_digest and has_secure_password in User + Band Models - DONE
session[:acccount_id] - DONE
Helpers will get the account from the session[:account_id] and check if the accoutable is a user or a band  - DONE
acc.accoutable_type <--- "User" "Band" - DONE
Sessions Controller - Create Action - DONE
Sessions Controller - Logout Action - DONE
Test for logging in User - DONE
Test for logging in Band - DONE
 Need Nav Bar based on User or Band - rendering, but erroring out (mixing up the routes) - DONE
Show persisting to database with datte now
BAND: Need to add new show from the browser + have it persist to the database - DOONE
BAND: Need to build out Your Profile view - show basic band information in a container - DONE
Once band adds show, needs to redirect back to the band_shows path - DONE
Band profile view needs to have link to Edit Profile - DONE
 Helper Methods for Band Metrics: 
    - total shows - DONE
    - total fans - DONE

1. Application controller refactor - DONE
2. User Controller Refactor - DONE
3. Band Controller Refactor - DONE

Sessions Controller Refactor - DONE
Account Controller Refactor - DONE
2. Account - Username presence - done
3. Account - Email presence - done



Band
has_many :shows
has_many :user_bands
has_many users through user_bands

Show
belongs_to band
has_many :user_shows
has_many users through user_shows

User 
has_many :user_shows
has_many User_bands
has_many shows through user_shows
has_many bands through user_bands

User Show
belongs_to user
belongs_to show

user band
belongs_to user
belongs_to band


s = Show.create(name: "antics", venue: "the roxy", city: "los angeles", state: "california", date: "10/20/2019")
b = Band.new(name: yeah )



Problems with Omniauth login 
1. User model currently has the self.from_facebook method
2. When you sign up or log into my app we use the ACCOUNT for that 
3. Based on the accountable type, we make a decision on where to send you to fil out the USER params
4. User model does not have a name method or email method, those are accessed by chaining user.account.name, etc.
5. My current self.from_facebook method appears to be creating an instance of a user, and 


Immediate Tasks:

1. "Attend Shows" -> needs to create new instance of user_shows
    - I want users to be able to attend show
    - User should go to the index of shows, and be able to pick a show
    - ...to add to its collection of shows (@user.shows)
    - whatever shows the user is attending will appear in its user_shows index

    Questions 
    1. What is responsible for creating instance of UserShow? (UserShowController)
    2. How can I add that show to that user's collection? (Similar to how we assigned @shows in the ShowController)
        - Maybe can use shovel method here?
        - Maybe a helper method in the User model to take care of the actual shoveling?
    3. What data do i need to validate to make sure the user is not adding
     ..... to another users collection?

     create action -> will POST to the user's shows
     

2. Needs to reflect anything attended on the user's dashboard 
3. Log in with Facebook (Only for Users)


Omniauth Questions Goal:
1. Want to be able to create an ACCOUNT with Facebook
    - In MY APP, the account is contains Username info, email address, and password
    - Sign in with Facebook will populate the username + password


Project Knowledge Requirements:

1. What is a POST request?
    - A post request is used to send data to a server to update/create a resource. 
    - Example: band updates the the information of an upcoming show via the update show form 
    - this sends a POST request to the server to update the attributes of that show's object

2. What are the 4 standard HTTP requests we work with in Rails?
    - get: requests data from a specified resource 
    - post: sends data from the browser to the server to update/create a resource
    - patch: applies partial modifications to an existing resource - does not completely replace a resource, unlike PUT
    - delete: deletes a specified resource

3. Describe the life cycle of a post request in your app.



4. Describe validations and how they work.
- validations are a way to ensure that only valid data is saved into the database
- ex. validating presence of a user_name attribute means that the user is not valid without a user name
- rails provides built in helpers to handle validations - making them easy to implementing
- the validation reviews the data being passed in thru params, checks if it is valid, then ensures that it
- is valid, if not it will provide an error.

5. What is the purpose of join tables?
- A join table is used to combine records from two or more tables by using values common to each.
- in the context of my project, my join tables serve the purpose of relating a show to either a band or a user
- user <<- user_show ->> show: relates an instance of a show to an instance of a user in my database
- band <<- band_show ->> show: relates an instance of a show to a specific band 
- that way, the show is a standalone entity that can "belong" to multiple types of accounts without having to include
 a band ID and a user ID in the shows table

- Helps limit the amount of required parameters I need to include to create a show

6. What does belongs_to and has_many do in your controller? 
- Belongs_to sets up a one to one connection between models. Ex. A show belongs to a band 
- has_many sets up a many to many connection between models. ex. a band has_many shows through band_shows, making a band able to have multiple instacnes of shows related to their account
- Activerecord is the gem responsible for these relationships 

7. What macro writes your password + password= methods? 
- the gem is bcrypt, the macro is has_secure_password

8. Describe how nested forms work

9. Describe how to set up nested URL's (manually or with nested resources)
- I used nested resources in my project in order to capture the has many relationship between my models
- Ex. Band has access to all show resources (create, new, how, etc.)
- In order to do this, next to my users resources expression, I pass a block of the nested routes for shows as well
- since a show belongs to a band, a show is considered a child of that band model -> giving me access to url's such as "/bands/:band_id/shows/new"

10. What are scopes? What is the type of data they take as an argument? What is an identical way to acheive this?

11. Describe the authentication process in your app

- sign up: 
    1. You create an account as either a band or user. if you are a band, you check off the band box, which is a boolean that determines whether or not the account's accountable_type is "band or user".
    2. Once you have determined your type, you are redirected to second half of the sign up form via the new_band_path or new_user_path to complete your registration. 
    3. Upon login, you will have access to different resources dependent on whether you are a band or user.
- log in: 
    1. you log in using the email address and password present in the account.
    2. The sessions controller create action will find the appropriate account by whatever email address is passed thru params, make sure the account is not nil, authenticate the password, then use log_in(@account) helper to set the session.
    3. One additional check takes place after the session id has been set to determine if that accounts accountable type is a band or a user, depending on the type, you'll be redirected either to the band path or user path with thier accountable id

- log out:
    - when the user clicks log out - the session is cleared and the root path is rendered

12. How to you protect your resources from users that do not own them? (and from logged out users?)





